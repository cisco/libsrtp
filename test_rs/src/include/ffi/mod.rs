#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]

// The general approach of this module is as follows:
//
// 1. The primary content of the header is generated by `bindgen` from the relevant C headers.
//    The generated content is cleaned up, e.g., by removing struct tests and consolidating extern
//    blocks.  Code not used by tests is commented out to silence dead code warnings, but left in
//    place to highlight the fact that it is unused.
//
// 2. The C interface is not exposed as `pub` by this module.  Instead, we provide a thin Rust
//    wrapper around the C functions that provides three nice things:
//    * Isolates `unsafe` calls so that test code can be written in safe rust
//    * Uses RAII to ensure that objects are cleaned up
//    * Exposes a clean Rust interface that is plausible for a pure Rust implementation
//
// This is effectively what a typical C-wrapping crate such as `openssl` would do, with a -sys
// crate exposing the low-level API.
//
// The latter property ensures that the tests are memory-safe as long as the underlying library is.
// It also means that as we convert C components to Rust, we will be able to compare all three
// configurations:
//      1. C called via FFI
//      2. Rust called via FFI
//      3. Rust called natively
//
// The difference between (1) and (2) is the difference that C callers will see.  The difference
// between (2) and (3) indicates how much of that is due to the FFI interface, vs. the core of the
// Rust implementation.

// Submodules
mod auth;
pub(crate) mod cipher;
mod datatypes;
pub(crate) mod kernel;
pub(crate) mod rdb;
pub(crate) mod rdbx;
pub(crate) mod srtp;
mod types;

#[cfg(feature = "native-crypto")]
pub(crate) mod aes;

#[cfg(feature = "native-crypto")]
pub(crate) mod sha1;
